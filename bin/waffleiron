#!/usr/local/bin/bash

DIR="$( \
  cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && \
  cd .. && pwd \
)"

SITE="$( \
  $DIR/bin/env 'SITE_NAME')" || \
  SITE="$(lando ssh -s appserver -c env | \
  grep TERMINUS_SITE | \
  cut -d '=' --complement -f 1 \
)"

SITE_ENV="$( \
  $DIR/bin/env 'SITE_ENV')" || \
  SITE_ENV="$(lando ssh -s appserver -c env | \
  grep TERMINUS_ENV | \
  cut -d '=' --complement -f 1 \
)"

# list waffleiron project dir
_ls() {
  cd $DIR
  printf "\n path: $DIR \n\n"
  ls -la
}

# list the apps path
_paths() {
  lando ssh -s appserver -c env | grep "PATH" | cut -d '=' --complement -f 1 | tr ':' '\n'
}

#search env or list all
_env() {
  if [ -z "$1" ]
    then
      lando ssh -s appserver -c env | grep "$1"
    else
      lando ssh -s appserver -c env
  fi
}

_clean() {
  cd $DIR
  rm -rf vendor web/wp
  # find . -maxdepth 1 ! -name util ! -name index.php ! -name -name web/wp-content/plugins/. -delete
  printf 'clean dat ish up'
}

_rm_submodules() {
  cd $DIR
  git submodule deinit --all
  git submodule | cut -c43- | while read -r line; do (git rm -f "$line"); done
  git config --local -l | grep submodule | sed -e 's/^\(submodule\.[^.]*\)\(.*\)/\1/g' | while read -r line; do (git config --local --remove-section "$line"); done
  rm -f .gitmodules
  rm -rf .git/modules
}

_deploy() {
  cd $DIR
  _push $@
  git add -A && git commit -m 'deployed'
  git push origin $SITE
  git push $SITE master
}

_restart() {
  cd $DIR
  lando poweroff && osascript -e \'quit app "Docker"\' && printf "\nstopping docker..."
  open --background -a Docker && printf "starting docker...\n"
}

_pull () {
  cd $DIR
  if [ -z $1 ]
  then
    lando ssh -c "rm -f /app/database.sql.gz"
    lando terminus backup:create $1 --element=db
    lando terminus backup:get $1 --element=db --to=/app/database.sql.gz
    lando db-import database.sql.gz
    lando ssh -c "rm -f /app/database.sql.gz"
  else
    lando pull --code=none --database=dev --files=dev
  fi
}

_push () {
  cd $DIR
  lando db-export dump.sql
  lando terminus import:database $1 dump.sql
}

_create-post-type () {
  cd $DIR
  name=${1:-"change-name"}
  icon=${2:-"dashicons-text-page"}

  printf "\n\nCreating post type and plugin for $name\n\n"
  lando wp scaffold post-type $name \
    --label="$name"                 \
    --textdomain="waffleiron"       \
    --plugin="waffleiron"           \
    --dashicon="$icon"              \
    --force &&                      \
  printf "\n\ncreation!\n"
}

_rebuild() {
  cd $DIR
  lando poweroff && lando destroy -y && lando start && _pull
}

_install() {
  cd $DIR
  lando ssh -c "rm -rf /app/vendor && mkdir /app/vendor" && lando composer install --no-ansi --no-interaction --optimize-autoloader
  sleep 10
  lando wp plugin activate --all
}

_cc() {
  cd $DIR
  lando wp cache flush
}

# init function... used to be all the commands in composer.json but thats ugly dude
_init() {
  cd $DIR

  center 'burn it all down to build it back up baby!!' 2 2
  lando destroy -y
  sleep 15

  _install
  sleep 10

  lando start
  sleep 15

  _pull
  sleep 15

  _restart
  sleep 15

  center 'waffles are done dude!' 12 16 && _cc
  sleep 10
}


_help() {
  cd $DIR
  echo "help       waffleiron help"
  echo "init       waffleiron init"
  echo "install    waffleiron install"
  echo "restart    waffleiron restart"
  echo "cc         waffleiron cc"
  echo "rebuild    waffleiron rebuild"
  echo "clean      waffleiron clean"
  echo "pull       waffleiron pull"
  echo "link       waffleiron link"
  echo "deploy     waffleiron deploy"
  echo "ls         waffleiron ls"
}

if [ "$#" -eq 0 ]
  then
    printf "suh? no args supplied\n"
    printf "\nwaffleiron dir:\n$DIR\n\n"
    _help
fi

POSITIONAL=()
while [[ $# -gt 0 ]]
  do
  key="$1"

  case $key in
    # init
    init)
      _init
      shift # past argument
      shift # past value
    ;;

    # restart
    r|restart)
      _restart
      shift # past argument
      shift # past value
    ;;

    # cc
    cc|clear|clear-cache)
      _cc
      shift # past argument
      shift # past value
    ;;

    # restart
    rebuild)
      _rebuild
      shift # past argument
      shift # past value
    ;;

    # restart
    pull|pull)
      _pull $2
      shift # past argument
      shift # past value
    ;;

    # push
    push)
      _push $2
      shift # past argument
      shift # past value
    ;;

    # restart
    c|clean)
      _clean
      shift # past argument
      shift # past value
    ;;

    # restart
    cpt|create-post-type)
      _create-post-type $2 $3
      shift # past argument
      shift # past value
    ;;

    # restart
    dep|deploy)
      _deploy
      shift # past argument
      shift # past value
    ;;

    # paths
    path|paths)
      _paths
      shift # past argument
      shift # past value
    ;;

    # env
    e|env)
      _env
      shift # past argument
      shift # past value
    ;;

    # install
    i|install)
      _install
      # do a harder install bro!
      if [ [$2 == "-f"] ]
        then
          _clean && _install && _restart && lando wp plugin activate --all && _cc
      fi
      shift
      shift
    ;;

     # help
    s|superpowers)
      arr=(${_cc} ${_env})
      echo ${arr[*]}

      shift # past argument
      shift
    ;;

    # help
    h|help)
      _help
      shift # past argument
    ;;

    # catch em all...
    *)
      POSITIONAL+=("$1")
      shift
    ;;
  esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters
