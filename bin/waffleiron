#!/usr/local/bin/bash

#
## waffleiron vars
export WAFFLEIRON_DIR="$( \
  cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && \
  cd .. && pwd ; \
)" ;
SITE_PREFIX=$( cd $WAFFLEIRON_DIR && ./bin/env "SITE_PREFIX" ; ) ;
export SITE_NAME="$SITE_PREFIX-$( cd $WAFFLEIRON_DIR && ./bin/env "SITE_NAME" )"
export SITE_ENV=$( cd $WAFFLEIRON_DIR && ./bin/env "SITE_ENV" ; ) ;

_art () {
cat << "EOF"
                               
   __     __ ____________///_____/*/___ __ ____
  | | /| /// __  /  __/__/// ___/ / __/ _ \ __ \
  | |/ |/ / /_/ / __/__//// ___/ / / / /_/ / / /
  |__/|__/\__,_/__/__///////__/ /_/  \____/ /_/

EOF
}

# help me!
_help () { 
  cd $WAFFLEIRON_DIR
  echo
  echo
  _art
  echo
  echo "  ENV ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  echo
  echo "      WAFFLEIRON_DIR : $WAFFLEIRON_DIR"
  echo "           SITE_NAME : $SITE_NAME"
  echo "            SITE_ENV : $SITE_ENV"
  echo
  echo "  USAGE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  echo
  echo "      $ waffleiron help           "
  echo "                   init           "
  echo "                   i|install      "
  echo "                   restart        "
  echo "                   cc             "
  echo "                   rebuild        "
  echo "                   clean          "
  echo "                   push           "
  echo "                   pull           "
  echo "                   link           "
  echo "                   deploy         "
  echo "                   ls             "
  echo 
}

# list waffleiron project dir
_ls () {
  cd $WAFFLEIRON_DIR
  printf "\n path: $WAFFLEIRON_DIR \n\n"
  ls -la
}

# list the apps path
_paths () {
  lando ssh -s appserver -c env | grep "PATH" | cut -d '=' --complement -f 1 | tr ':' '\n'
}

# search env or list all
_env () {
  echo "  ENV ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  echo
  echo "      WAFFLEIRON_DIR : $WAFFLEIRON_DIR"
  echo "           SITE_NAME : $SITE_NAME"
  echo "            SITE_ENV : $SITE_ENV"
  echo
  echo "  PANTHEON / LANDO ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
  echo
  if [ -z "$1" ]
    then
      printf "      $(lando ssh -s appserver -c env | grep "$1")"
    else
      printf "      $(lando ssh -s appserver -c env)"
  fi
  echo ;
}

_createpost () {
  POST_TYPE=${1:-post}
  POST_TITLE=${2:-"$1-${RANDOM:0:2}"}

  lando wp post create --post_type=$POST_TYPE --post_title=$POST_TITLE --post_status="published" && \

  sleep 5 ;
}

# deploy your mom
_deploy () {
  cd $WAFFLEIRON_DIR
  message=${1:-'default message duh'}
  branch=${2:-'master'}

  _push 

  git add -A && \
  git commit -m "$message" && \
  git push origin $branch
}

# and restart you're momm
_restart () {
  cd $WAFFLEIRON_DIR
  lando poweroff && osascript -e \'quit app "Docker"\' && printf "\nstopping docker..."
  open --background -a Docker && printf "starting docker...\n"
}

# pull yo mom
_pull () {
  cd $WAFFLEIRON_DIR
  site=${1:-"$SITE_NAME.$SITE_ENV"}

  lando ssh -c "rm -rf /app/dump.sql.gz"
  lando terminus backup:create $site --element=db -y
  lando terminus backup:get $site --element=db --to=/app/dump.sql.gz -y
  lando db-import dump.sql.gz -y
}

# push yo mom
_push () {
  # branch="-$(git branch | grep \* | cut -d ' ' -f2)"
  # if [[ $branch -eq 'master' ]]
  #   then
  #     branch=""
  # fi
  cd $WAFFLEIRON_DIR && \
  _install && pnpm run build && rm -rf node_modules && \
  lando restart ; \
  sleep 20 && \
  cd web && \
  lando db-export $SITE_NAME.$SITE_ENV.sql && \
  lando ssh -c "chmod 777 $SITE_NAME.$SITE_ENV.sql.gz" && \
  cd .. && \

  git add -A && \
  git commit -m "$SITE_NAME.$SITE_ENV db and files pushed to all remotes including all pantheon sites (dev env only!)" && \
  git push origin "$(git branch | grep \* | cut -d ' ' -f2)" && \

  sleep 30 # wait for remote

  lando push --files=dev --code=none --database=none && \
  lando ssh -c "cd /app && terminus import:database $SITE_NAME.$SITE_ENV https://$SITE_ENV-$SITE_NAME.pantheonsite.io/$SITE_NAME.$SITE_ENV.sql.gz" && \
  echo "push it reaaal good!"
}

_exportDB () {
  cd $WAFFLEIRON_DIR/web
  lando db-export $SITE_NAME.$SITE_ENV.sql
}

# create-post-type yo mom
_create-post-type () {
  cd $WAFFLEIRON_DIR
  name=${1:-"change-name"}
  icon=${2:-"dashicons-text-page"}

  printf "\n\nCreating post type and plugin for $name\n\n"
  lando wp scaffold post-type $name \
    --label="$name"                 \
    --textdomain="waffleiron"       \
    --plugin="waffleiron"           \
    --dashicon="$icon"              \
    --force                  &&     \
  printf "\n\ncreation!\n\n" &&     \
  return 1
}

# rebuild yo mom
_rebuild () {
  cd $WAFFLEIRON_DIR && \
  lando start && \
  lando destroy -y && \
  lando poweroff && \
  sleep 15
}

_composer_init () {
  cd $WAFFLEIRON_DIR
  lando ssh -c " \
    cd /app && \
    rm -rf vendor ; \
    mkdir /app/vendor ; \
    composer install --no-dev --no-ansi --no-interaction --optimize-autoloader
  "
}

# _install install i
_install () {
  cd $WAFFLEIRON_DIR
  rm -rf node_modules && \
  pnpm install && \
  sleep 10
  _composer_init && \
  _art
  sleep 30
  lando wp plugin activate --all && \
  lando wp plugin deactivate classic-editor && \
  _cc && \
  printf "all done..."
}

# cc yo ma
_cc () {
  cd $WAFFLEIRON_DIR
  if [[ -z $1 ]] && [[ $1 -eq "--remote" ]] ; then
    lando terminus env:clear-cache ${1:-"$SITE_NAME.$SITE_ENV"}
    exit 0
  fi
  lando wp cache flush
}

_clean () {
  cd $WAFFLEIRON_DIR
  lando ssh -c "cd /app && rm -rf vendor node_modules ; rm -rf web/wp-content/uploads/cache/* ;"
}

_start () {
  cd $WAFFLEIRON_DIR && lando start
}

# init function... used to be all the commands in composer.json but thats ugly dude
_init() {
  cd $WAFFLEIRON_DIR && \
  printf "\n\nburn it all down to build it back up baby!!\n\n"
  _rebuild 
  sleep 60 && \

  printf "\n\n .....starting.....nowish\n\n" && \
  _start && \
  sleep 45 && \

  printf "\n\n installing....\n\n"
  _clean && \
  _install && \
  sleep 60 && \

  printf "\n\n pulling....\n\n"
  _pull && \
  sleep 10 && \

  printf "\n\n clearing cache....\n\n"
  _cc && \
  sleep 10 && \

  _art && \
  printf "\n\n...all done...\n"
}

if [ "$#" -eq 0 ]
  then
    printf "suh? no args supplied"
    _help
fi

POSITIONAL=()
while [[ $# -gt 0 ]]
  do
  key="$1"

  case $key in
    # init
    --init|init)
      lando start
      _install
      _pull
      _cc
      
      shift # past argument
      shift # past value
    ;;

    # restart
    -r|r|restart)
      _restart
      shift # past argument
      shift # past value
    ;;

    # cc
    -cc|cc|--flush|--clear|--clear-cache)
      _cc $@
      shift # past argument
      shift # past value
    ;;

    # restart
    --rebuild|rebuild)
      _rebuild
      shift # past argument
      shift # past value
    ;;

    # restart
    -pu|--pull|pu|pull)
      # _pull $2
      lando pull --code=none --database=dev --files=dev ;

      shift # past argument
      shift # past value
    ;;

    # push
    -p|p|push)
      # _push $@
      git add -A && git commit -m "${2:-'Autowafflmagically! - waffles'}" && \
        git push origin && \

      lando push --code=none --database=dev --files=dev ;

      shift # past argument
      shift # past value
    ;;

    # restart
    -c|--clean|c|clean)
      _clean
      shift # past argument
      shift # past value
    ;;

    # create post type with 
    cpt|create-post-type)
      _create-post-type $2 $3
      shift # past argument
      shift # past value
    ;;

    # create post type with 
    start|s)
      cd $DIR
      lando start
      shift # past argument
      shift # past value
    ;;

    #
    ## create post of $1 and name it with $2
    -cp|cp|create-post )
      cd $DIR
      POST_TYPE=${2:-page} && \
      POST_TITLE=${3:-"${POST_TYPE}-${RANDOM:0:2}"} ;
      lando wp post create --post_type=$POST_TYPE --post_title=$POST_TITLE --post_status="published" && \
      sleep 5 ;

      shift # past argument
      shift # past value
    ;;

    # deploy
    -c|c|config)
      cd $DIR/bin
      $EDITOR waffleiron ;
      shift # past argument
      shift # past value
    ;;

    # deploy
    dep|deploy)
      _deploy
      shift # past argument
      shift # past value
    ;;

    # paths
    path|paths)
      _paths
      shift # past argument
      shift # past value
    ;;

    # env
    e|env)
      _env
      shift # past argument
      shift # past value
    ;;

    # env
    export)
      _exportDB
      shift # past argument
      shift # past value
    ;;

    # install
    i|install)
      _install
      # do a harder install bro!
      if [ [$2 == "-f"] ]
        then
          _clean && _install && _restart && lando wp plugin activate --all && _cc
      fi
      shift
      shift
    ;;

     # help
    superpowers)
      arr=(${_cc} ${_env})
      echo ${arr[*]}

      shift # past argument
      shift
    ;;

     # help
    --art|art)
      _art
      shift # past argument
      shift
    ;;


    -ks|ks|--kickstart|kickstart)
      export PANTHEON_SITE_NAME="$SITE_PREFIX-${2-$SITE_NAME}"
      export PANTHEON_MACHINE_TOKEN=A1Q4fO43O3YycjoYFjmdE2Yy3sDzCMl4OqVZi3ygOLvA2
      export PANTHEON_UPSTREAM_KEY=${3:-c578c77c-d12e-4943-adc7-d2c177859cee}

      printf "\n PANTHEON_SITE_NAME     $PANTHEON_SITE_NAME"
      printf "\n PANTHEON_MACHINE_TOKEN $PANTHEON_MACHINE_TOKEN"
      printf "\n PANTHEON_UPSTREAM_KEY  $PANTHEON_UPSTREAM_KEY\n"

      rm -rf $PANTHEON_SITE_NAME && \
      mkdir $PANTHEON_SITE_NAME && \
      cd $PANTHEON_SITE_NAME && \

      lando terminus auth:login \
        --email=chris.wahlfeldt@mckenziewagner.com\
        --machine-token=$PANTHEON_MACHINE_TOKEN && \

      lando terminus site:create \
        --org=mckenzie-wagner \
        --$PANTHEON_SITE_NAME "$PANTHEON_SITE_NAME" $PANTHEON_UPSTREAM_KEY && \

      printf "\n\n chill fo a minute \n\n" && \
      sleep 60 && \

      lando init \
        --source remote \
        --recipe pantheon \
        --remote-url git@github.com:cwahlfeldt/waffleiron.git \
        --pantheon-auth "$PANTHEON_MACHINE_TOKEN" \
        --webroot "/app/web" \
        --pantheon-site $PANTHEON_SITE_NAME \
        --full && \

      lando start && \
        lando pull --code=dev --database=dev --files=${4:-'dev'} && \
        _install

      shift # past argument
      shift
    ;;

    # help
    composer:init)
      _composer_init
      shift # past argument
    ;;

    # help
    '-c\ production'|clean:prod)
      lando ssh -c "rm -rf /app/web/wp-content/uploads/cache/* /app/node_modules"

      shift # past argument
    ;;

    # help
    h|help)
      _help
      shift # past argument
    ;;

    # catch em all...
    *)
      POSITIONAL+=("$1")
      shift
    ;;
  esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters
