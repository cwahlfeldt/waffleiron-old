#!/usr/bin/env bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && cd .. && pwd )"

_ls() {
  cd $DIR
  printf "\n path: $DIR \n\n"
  ls -la
}

_paths() {
  lando ssh -s appserver -c env | grep "PATH" | cut -d '=' --complement -f 1 | tr ':' '\n'
}

_env() {
  lando ssh -s appserver -c env | grep ""
}

_clean() {
  cd $DIR
  rm -rfv vendor web/wp
  find . -maxdepth 1 ! -name util ! -name index.php -name web/wp-content/plugins/. -delete
  printf 'clean dat ish up'
}

_rm_submodules() {
  cd $DIR
  git submodule deinit --all
  git submodule | cut -c43- | while read -r line; do (git rm -f "$line"); done
  git config --local -l | grep submodule | sed -e 's/^\(submodule\.[^.]*\)\(.*\)/\1/g' | while read -r line; do (git config --local --remove-section "$line"); done
  rm -fv .gitmodules
  rm -rfv .git/modules
}

_deploy() {
  cd $DIR
  travis encrypt-file .env --add
  _clean
  lando push --code=none --database=dev --files=dev
  git add -A && git commit -m 'deployed from local to pantheon and github'
  git push origin master
  git push pantheon master
}

_restart() {
  cd $DIR && lando poweroff && lando start 
}

_pull () {
  cd $DIR

  site="$(./bin/env 'SITE_NAME')" || site="$(lando ssh -s appserver -c env | grep TERMINUS_SITE | cut -d '=' --complement -f 1)"
  env="$(./bin/env 'SITE_ENV')" || env="$(lando ssh -s appserver -c env | grep TERMINUS_ENV | cut -d '=' --complement -f 1)"
  
  printf "\npulling from $site.$env\n" && lando pull --code=none --database=dev --files=dev
}

_create-post-type () {
  cd $DIR

  # lando scaffold plugin $1 \
  #   --dir="$DIR/web/wp-content/plugins" \
  #   --plugin_name=""
}

_rebuild() {
  cd $DIR
  lando destroy -y
  lando start
  _pull
}

_install() {
  cd $DIR
  arg1="$(tr '[:lower:]' '[:upper:]' <<< ${arg1:0:1})${arg1:1}"

  lando ssh -c "rm -rf /app/vendor && mkdir /app/vendor" && lando composer install --no-ansi --no-interaction --optimize-autoloader
}

# init function... used to be all the commands in composer.json but thats ugly dude
_init() {
  cd $DIR
  clean
  _rebuild
  install
  pull
  lando restart
  center 'clear/flush cache' 12 16
  cc
}

_cc() {
  cd $DIR
  lando wp cache flush
}

_help() {
  cd $DIR
  echo "help       waffleiron help"
  echo "init       waffleiron init"
  echo "install    waffleiron install"
  echo "restart    waffleiron restart"
  echo "cc         waffleiron cc"
  echo "rebuild    waffleiron rebuild"
  echo "clean      waffleiron clean"
  echo "pull       waffleiron pull"
  echo "link       waffleiron link"
  echo "deploy     waffleiron deploy"
  echo "ls         waffleiron ls"
}

if [ "$#" -eq 0 ]
  then
    printf "suh? no args supplied\n"
    printf "\nwaffleiron dir:\n$DIR\n\n"
    _help
fi

POSITIONAL=()
while [[ $# -gt 0 ]]
  do
  key="$1"

  case $key in
    # init
    init)
      _init
      shift # past argument
      shift # past value
    ;;

    # restart
    r|restart)
      _restart
      shift # past argument
      shift # past value
    ;;

    # cc
    cc|clear|clear-cache)
      _cc
      shift # past argument
      shift # past value
    ;;

    # restart
    rebuild)
      _rebuild
      shift # past argument
      shift # past value
    ;;

    # restart
    pull|pull)
      _pull
      shift # past argument
      shift # past value
    ;;

    # restart
    c|clean)
      _clean
      shift # past argument
      shift # past value
    ;;

    # restart
    pt|create-post-type)
      _create-post-type $2
      shift # past argument
      shift # past value
    ;;

    # restart
    dep|deploy)
      _deploy
      shift # past argument
      shift # past value
    ;;

    # paths
    path|paths)
      _paths
      shift # past argument
      shift # past value
    ;;

    # env
    e|env)
      _env
      shift # past argument
      shift # past value
    ;;

    # install
    i|install)
      _install
      # do a harder install bro!
      if [ [$2 == "-f"] ]
        then
          _clean && _install && _restart && lando wp plugin activate --all && _cc
      fi
      shift
      shift
    ;;

     # help
    s|superpowers)
      arr=(${_cc} ${_env})
      echo ${arr[*]}

      shift # past argument
      shift
    ;;

    # help
    h|help)
      _help
      shift # past argument
    ;;

    # catch em all...
    *)
      POSITIONAL+=("$1")
      shift
    ;;
  esac
done

set -- "${POSITIONAL[@]}" # restore positional parameters
