dist: trusty

cache:
  apt: true
  directories:
    # Cache directory for older Composer versions.
    - $HOME/.composer/cache/files
    # Cache directory for more recent Composer versions.
    - $HOME/.cache/composer/files

language:
    - php

php:
    - 5.4
    - 5.5
    - 5.6
    - 7.0
    - 7.1
    - 7.2
    - 7.3
    - "7.4snapshot"

env:
  # `master` is now 3.x.
  - PHPCS_BRANCH="dev-master" LINT=1
  # Lowest supported release in the 3.x series with which WPCS is compatible.
  - PHPCS_BRANCH="3.3.1"

matrix:
  fast_finish: true
  include:
    # Run PHPCS against WPCS. I just picked to run it against 7.2.
    - php: 7.2
      env: PHPCS_BRANCH="dev-master" SNIFF=1
      addons:
        apt:
          packages:
            - libxml2-utils

  allow_failures:
    # Allow failures for unstable builds.
    - php: "7.4snapshot"

before_install:
    # Speed up build time by disabling Xdebug.
    # https://johnblackbourn.com/reducing-travis-ci-build-times-for-wordpress-projects/
    # https://twitter.com/kelunik/status/954242454676475904
    - phpenv config-rm xdebug.ini || echo 'No xdebug config.'
    - export XMLLINT_INDENT="	"
    - export PHPUNIT_DIR=/tmp/phpunit
    - composer require squizlabs/php_codesniffer:${PHPCS_BRANCH} --update-no-dev --no-suggest --no-scripts
    - |
      if [[ "$SNIFF" == "1" ]]; then
          composer install --dev --no-suggest
          # The `dev` required DealerDirect Composer plugin takes care of the installed_paths.
      else
          # The above require already does the install.
          $(pwd)/vendor/bin/phpcs --config-set installed_paths $(pwd)
      fi
    # Download PHPUnit 7.x for builds on PHP >= 7.2 as the PHPCS
    # test suite is currently not compatible with PHPUnit 8.x.
    - if [[ ${TRAVIS_PHP_VERSION:0:3} > "7.1" ]]; then wget -P $PHPUNIT_DIR https://phar.phpunit.de/phpunit-7.phar && chmod +x $PHPUNIT_DIR/phpunit-7.phar; fi

script:
    # Lint the PHP files against parse errors.
    - if [[ "$LINT" == "1" ]]; then if find . -path ./vendor -prune -o -path ./bin -prune -o -name "*.php" -exec php -l {} \; | grep "^[Parse error|Fatal error]"; then exit 1; fi; fi
    # Run the unit tests.
    - |
      if [[ ${TRAVIS_PHP_VERSION:0:3} > "7.1" ]]; then
        php $PHPUNIT_DIR/phpunit-7.phar --filter WordPress --bootstrap="$(pwd)/vendor/squizlabs/php_codesniffer/tests/bootstrap.php" $(pwd)/vendor/squizlabs/php_codesniffer/tests/AllTests.php
      else
        phpunit --filter WordPress --bootstrap="$(pwd)/vendor/squizlabs/php_codesniffer/tests/bootstrap.php" $(pwd)/vendor/squizlabs/php_codesniffer/tests/AllTests.php
      fi
    # Test for fixer conflicts by running the auto-fixers of the complete WPCS over the test case files.
    # This is not an exhaustive test, but should give an early indication for typical fixer conflicts.
    # For the first run, the exit code will be 1 (= all fixable errors fixed).
    # `travis_retry` should then kick in to run the fixer again which should now return 0 (= no fixable errors found).
    # All error codes for the PHPCBF: https://github.com/squizlabs/PHP_CodeSniffer/issues/1270#issuecomment-272768413
    - if [[ "$SNIFF" == "1" ]]; then travis_retry $(pwd)/vendor/bin/phpcbf -p ./WordPress/Tests/ --standard=WordPress --extensions=inc --exclude=Generic.PHP.Syntax --report=summary; fi
    # Make sure the rulesets don't thrown unexpected errors or warnings.
    # This check needs to be run against a high PHP version to prevent triggering the syntax error check.
    # It also needs to be run against all PHPCS versions WPCS is tested against.
    - if [[ $TRAVIS_PHP_VERSION == "7.1" ]]; then $(pwd)/vendor/bin/phpcs -s ./bin/class-ruleset-test.php --standard=WordPress-Core; fi
    - if [[ $TRAVIS_PHP_VERSION == "7.1" ]]; then $(pwd)/vendor/bin/phpcs -s ./bin/class-ruleset-test.php --standard=WordPress-Docs; fi
    - if [[ $TRAVIS_PHP_VERSION == "7.1" ]]; then $(pwd)/vendor/bin/phpcs -s ./bin/class-ruleset-test.php --standard=WordPress-Extra; fi
    - if [[ $TRAVIS_PHP_VERSION == "7.1" ]]; then $(pwd)/vendor/bin/phpcs -s ./bin/class-ruleset-test.php --standard=WordPress; fi
    # WordPress Coding Standards.
    # @link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards
    # @link http://pear.php.net/package/PHP_CodeSniffer/
    - if [[ "$SNIFF" == "1" ]]; then $(pwd)/vendor/bin/phpcs --runtime-set ignore_warnings_on_exit 1; fi
    # Validate the xml files.
    # @link http://xmlsoft.org/xmllint.html
    - if [[ "$SNIFF" == "1" ]]; then xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./*/ruleset.xml; fi
    - if [[ "$SNIFF" == "1" ]]; then xmllint --noout --schema ./vendor/squizlabs/php_codesniffer/phpcs.xsd ./phpcs.xml.dist.sample; fi
    # Check the code-style consistency of the xml files.
    - if [[ "$SNIFF" == "1" ]]; then diff -B --tabsize=4 ./WordPress/ruleset.xml <(xmllint --format "./WordPress/ruleset.xml"); fi
    - if [[ "$SNIFF" == "1" ]]; then diff -B --tabsize=4 ./WordPress-Core/ruleset.xml <(xmllint --format "./WordPress-Core/ruleset.xml"); fi
    - if [[ "$SNIFF" == "1" ]]; then diff -B --tabsize=4 ./WordPress-Docs/ruleset.xml <(xmllint --format "./WordPress-Docs/ruleset.xml"); fi
    - if [[ "$SNIFF" == "1" ]]; then diff -B --tabsize=4 ./WordPress-Extra/ruleset.xml <(xmllint --format "./WordPress-Extra/ruleset.xml"); fi
    - if [[ "$SNIFF" == "1" ]]; then diff -B --tabsize=4 ./phpcs.xml.dist.sample <(xmllint --format "./phpcs.xml.dist.sample"); fi
    # Validate the composer.json file.
    # @link https://getcomposer.org/doc/03-cli.md#validate
    - if [[ "$LINT" == "1" ]]; then composer validate --no-check-all --strict; fi
